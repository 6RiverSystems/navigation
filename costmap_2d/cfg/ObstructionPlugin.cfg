#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, bool_t, double_t, int_t, str_t

gen = ParameterGenerator()

gen.add("enabled", bool_t, 0, "Whether to apply this plugin or not", True)
gen.add("min_obstacle_height", double_t, 0, "The minimum height of any obstacle to be inserted into the costmap in meters.", 0.0, 0, 50)
gen.add("max_obstacle_height", double_t, 0, "The maximum height of any obstacle to be inserted into the costmap in meters.", 2.0, 0, 50)

gen.add("distance_threshold", double_t, 0, "How close a reading needs to be to the static layer to count as semi-static.", 0.2, 0, 1)

gen.add("pseudostatic_cost_scaling_factor", double_t, 0, "A scaling factor to apply to pseudostatic cost values during inflation.", 10, 0, 100)
gen.add("pseudostatic_inflation_radius", double_t, 0, "The radius in meters to which the map inflates pseudostatic obstacle cost values.", 0.55, 0, 50)

gen.add("dynamic_cost_scaling_factor", double_t, 0, "A scaling factor to apply to cost values during inflation.", 10, 0, 100)
gen.add("dynamic_inflation_radius", double_t, 0, "The radius in meters to which the map inflates obstacle cost values.", 0.55, 0, 50)

gen.add("enable_decay", bool_t, 0, "Whether to decay obstructions or not", True)
gen.add("obstruction_half_life", double_t, 0, "How long until the obstruction decays to half of its value", 5, 0, 100)
gen.add("obstruction_half_life_queue", double_t, 0, "How long until the obstruction decays to half of its value in the queue", 2, 0, 100)
gen.add("num_obstruction_levels", int_t, 0, "The number of times an obstruction will decay before it is removed completely.", 5, 1, 50)

inflation_type_enum = gen.enum([
    gen.const("exponential_inflation", int_t, 0, "inflate with exponenetial method"),
    gen.const("trinomial_inflation", int_t, 1, "inflate with trinomial method")],
    "An enum to set inflation type")
gen.add("pseudostatic_inflation_type", int_t, 0, "The inflation function to use for pseudostatic obstructions.", 0, edit_method=inflation_type_enum)
gen.add("dynamic_inflation_type", int_t, 0, "The inflation function to use for dynamic obstructions.", 0, edit_method=inflation_type_enum)

exit(gen.generate("costmap_2d", "costmap_2d", "ObstructionPlugin"))
